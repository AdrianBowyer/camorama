/* This file is part of camorama
 *
 * AUTHORS
 *     Sven Herzberg  <herzi@gnome-de.org>
 *
 * Copyright (C) 2006  Sven Herzberg <herzi@gnome-de.org>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */

#include "filter.h"

#ifdef HAVE_CONFIG_H
# include <config.h>
#endif

#include <glib/gi18n.h>

#include <stdio.h>

/* GType stuff for CamoramaFilterMirror */
typedef struct _CamoramaFilter      CamoramaFilterMirror;
typedef struct _CamoramaFilterClass CamoramaFilterMirrorClass;

G_DEFINE_TYPE(CamoramaFilterMirror, camorama_filter_mirror, CAMORAMA_TYPE_FILTER);

static void
camorama_filter_mirror_init(CamoramaFilterMirror* self) {}

static char start = 1;

static long *lastSignal;
static long *lastHigh;
static long *lastHighThenLow;
static long *output;

static int lowPassTC = 10;
static int highPassTC = 3;

static int count = 0;

static void
camorama_filter_mirror_filter(CamoramaFilter* filter, guchar *image, gint width, gint height, gint depth) 
{
	gint x, y, z, row_length, row, column, thisPixel, thisXY, thatXY,  memory;

	long signal, thisHigh, thisHighThenLow, thatHigh, thatHighThenLow, thatSignal, newValue, max, min, scale;

	if(start)
	{

		printf("\n\nwidth: %d, height: %d, depth: %d\n\n", width, height, depth);
		memory = (5 + (width+1)*(height+1))*sizeof(long);
		lastSignal = (long *)malloc(memory);
		if (!lastSignal)
		{
			printf("ERROR: Cannot malloc image memory 1\n");
			return;
		}
		lastHigh = (long *)malloc(memory);
		if (!lastHigh)
		{
			printf("ERROR: Cannot malloc image memory 2\n");
			return;
		}
		lastHighThenLow = (long *)malloc(memory);
		if (!lastHighThenLow)
		{
			printf("ERROR: Cannot malloc image memory 3\n");
			return;
		}
		output = (long *)malloc(memory);
		if (!output)
		{
			printf("ERROR: Cannot malloc image memory 3\n");
			return;
		}
	}

	start = 0;
	max = LONG_MIN;
	min = LONG_MAX;
	thatSignal = 0;

	row_length   = width * depth;
	for(y = 0; y < height; y++) 
	{
		row = y*row_length;
		for (x = 1; x < width; x++) 
		{
			column = x*depth;
			thisPixel = row + column;
			thisXY = y*width+x;
			thatXY = thisXY - 1; 

			// Go to grey

			signal = 0;
			for (z = 0; z < depth; z++) 
			{
				signal += image[thisPixel + z];
			}
			signal = signal/depth;

			// Apply Reichardt
			
			thisHigh = (highPassTC*(lastHigh[thisXY] + signal - lastSignal[thisXY]))/(highPassTC + 1);
			thisHighThenLow = (thisHigh + lastHighThenLow[thisXY]*lowPassTC)/(lowPassTC + 1);
			thatHigh = (highPassTC*(lastHigh[thatXY] + thatSignal - lastSignal[thatXY]))/(highPassTC + 1);
			thatHighThenLow = (thatHigh + lastHighThenLow[thatXY]*lowPassTC)/(lowPassTC + 1);

			newValue = thisHighThenLow*thatHigh - thatHighThenLow*thisHigh;

			if(newValue > max)
				max = newValue;
			if(newValue < min)
				min = newValue;

			output[thisXY] = newValue;

			// Remember for next time

			thatSignal = signal;
			lastHigh[thisXY] = thisHigh;
			lastHighThenLow[thisXY] = thisHighThenLow;
			lastSignal[thisXY] = signal;
		}
	}
	count++;
	if(!(count%50))
	{
		printf("\nmax: %ld, min: %ld\n", max, min);
	}

	scale = max - min;

	for(y = 0; y < height; y++) 
	{
		row = y*row_length;
		for (x = 1; x < width; x++) 
		{
			column = x*depth;
			thisPixel = row + column;
			thisXY = y*width+x;
			signal = (output[thisXY]*255)/scale - min;
			if(signal > 255)
				signal = 255;
			if(signal < 0)
				signal = 0;
			for (z = 0; z < depth; z++) 
			{
				image[thisPixel + z] = (guchar)signal;
			}
		}
	}
}

static void
camorama_filter_mirror_class_init(CamoramaFilterMirrorClass* self_class) {
	self_class->filter = camorama_filter_mirror_filter;
	// TRANSLATORS: This is a noun
	self_class->name   = _("Mirror");
}


